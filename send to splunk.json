{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_4",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_4_to_port_2",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_5",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_5_to_port_6",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_7_to_port_8",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_5_to_port_10",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                }
            ],
            "hash": "afa88d60392d8e4135b21d1862f9b9bf91a4e160",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.99999999999983
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1480
                },
                "10": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "L5_CF_Get_Query_Results_py3",
                            "repoName": "chris"
                        },
                        "functionId": 3,
                        "functionName": "L5_CF_Get_Query_Results_py3_3",
                        "id": "10",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "L5_CF_Get_Query_Results_py3": {
                                "description": "",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "peer",
                                        "name": "peer",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "priority",
                                        "name": "priority",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "count",
                                        "name": "count",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "L5_CF_Get_Query_Results_py3",
                                "name": "L5_CF_Get_Query_Results_py3"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "L5_CF_Get_Query_Results_py3": {
                                "container": "container:id",
                                "count": "run_query_1:action_result.data.*.count",
                                "peer": "run_query_1:action_result.data.*.peer",
                                "priority": "run_query_1:action_result.data.*.priority"
                            }
                        }
                    },
                    "errors": {},
                    "id": "10",
                    "type": "utility",
                    "x": 1400,
                    "y": 920
                },
                "2": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "format_1",
                        "id": "2",
                        "parameters": [
                            "string_to_uppercase_1:custom_function_result.data.uppercase_string"
                        ],
                        "template": "find_peers server=\"{0}\"\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "format",
                    "x": 980,
                    "y": 640
                },
                "4": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "string_to_uppercase",
                            "repoName": "community"
                        },
                        "functionId": 1,
                        "functionName": "string_to_uppercase_1",
                        "id": "4",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "string_to_uppercase": {
                                "description": "Convert the provided string to all uppercase characters.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The string to convert to uppercase",
                                        "inputType": "item",
                                        "label": "input_string",
                                        "name": "input_string",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "string_to_uppercase",
                                "name": "string_to_uppercase"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "string_to_uppercase": {
                                "input_string": "artifact:*.cef.destination"
                            }
                        }
                    },
                    "errors": {},
                    "id": "4",
                    "type": "utility",
                    "x": 980,
                    "y": 544.5
                },
                "5": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "esabwrev"
                        ],
                        "connectorId": 144,
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "run_query_1",
                        "id": "5",
                        "parameters": {
                            "command": "savedsearch",
                            "query": "format_1:formatted_data"
                        },
                        "requiredParameters": [
                            "query"
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "action",
                    "x": 980,
                    "y": 764.5
                },
                "6": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "approver": "admin",
                        "functionId": 1,
                        "functionName": "prompt_1",
                        "id": "6",
                        "message": "here's the list\n\n{0} priority: {1} count:{2}",
                        "parameters": [
                            "run_query_1:action_result.data.*.peer",
                            "run_query_1:action_result.data.*.priority",
                            "run_query_1:action_result.data.*.count"
                        ],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responseOptions": [
                                    "Yes",
                                    "No"
                                ],
                                "responsePrompt": "Update event?",
                                "responseType": "yes/no"
                            },
                            {
                                "responsePrompt": "comment:",
                                "responseType": "message"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "prompt",
                    "x": 1060,
                    "y": 860
                },
                "7": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "prompt_1:action_result.summary.responses.0",
                                        "value": "Yes"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "7",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "decision",
                    "x": 1060,
                    "y": 1000
                },
                "8": {
                    "data": {
                        "action": "update event",
                        "actionType": "generic",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "esabwrev"
                        ],
                        "connectorId": 144,
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "update_event_1",
                        "id": "8",
                        "parameters": {
                            "comment": "prompt_1:action_result.summary.responses.1",
                            "event_ids": "artifact:*.cef.notable_id",
                            "status": "in progress",
                            "urgency": "critical"
                        },
                        "requiredParameters": [
                            "event_ids"
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "action",
                    "x": 980,
                    "y": 1180
                },
                "9": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "L5_CF_Create_Containers_From_List_py3",
                            "repoName": "chris"
                        },
                        "functionId": 2,
                        "functionName": "L5_CF_Create_Containers_From_List_py3_2",
                        "id": "9",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "L5_CF_Create_Containers_From_List_py3": {
                                "description": "From a list of lists, create a set of Phantom containers and add in the appropriate artifacts",
                                "fields": [
                                    {
                                        "dataTypes": [],
                                        "description": "List of Lists for things to be containerized.",
                                        "inputType": "list",
                                        "label": "to_be_containerized",
                                        "name": "to_be_containerized",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "This will be the label applied to the container",
                                        "inputType": "item",
                                        "label": "container_label",
                                        "name": "container_label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "L5_CF_Create_Containers_From_List_py3",
                                "name": "L5_CF_Create_Containers_From_List_py3"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "L5_CF_Create_Containers_From_List_py3": {
                                "container_label": "malware",
                                "to_be_containerized": "l5_cf_get_query_results_py3_3:custom_function_result.data.results_list"
                            }
                        }
                    },
                    "errors": {},
                    "id": "9",
                    "type": "utility",
                    "x": 1820,
                    "y": 1000
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.3",
        "version": "5.0.1.66250"
    },
    "create_time": "2021-10-29T19:52:59.752614+00:00",
    "draft_mode": false,
    "labels": [
        "notable"
    ],
    "tags": []
}